# OrPaynter AI Platform - GitHub Actions CI/CD Pipeline
# File: .github/workflows/deploy.yml

name: OrPaynter Platform CI/CD

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: orpaynter

jobs:
  # ====================
  # CODE QUALITY & SECURITY
  # ====================
  
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-dev.txt

      - name: Run ESLint
        run: npm run lint

      - name: Run Python linting
        run: |
          flake8 services/ --max-line-length=100
          black --check services/
          isort --check-only services/

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          pip-audit

      - name: SAST Security Scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_YAML: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # ====================
  # TESTING
  # ====================

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [user-service, project-service, ai-service, payment-service, marketplace-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install service dependencies
        run: |
          cd services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run unit tests
        run: |
          cd services/${{ matrix.service }}
          pytest tests/unit/ -v --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/web-app/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/web-app
          npm ci

      - name: Run tests
        run: |
          cd frontend/web-app
          npm run test:coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/web-app/coverage/lcov.info
          flags: frontend

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_orpaynter
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements-test.txt

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_orpaynter
          REDIS_URL: redis://localhost:6379
          MONGO_URL: mongodb://test_user:test_password@localhost:27017/test_orpaynter
        run: |
          pytest tests/integration/ -v

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          playwright install

      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          npx playwright test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # ====================
  # BUILD & PUSH IMAGES
  # ====================

  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: needs.code-quality.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        service: 
          - api-gateway
          - user-service
          - project-service
          - ai-service
          - payment-service
          - marketplace-service
          - web-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ====================
  # SECURITY SCANNING
  # ====================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    if: needs.code-quality.outputs.should-deploy == 'true'

    strategy:
      matrix:
        service: 
          - api-gateway
          - user-service
          - project-service
          - ai-service
          - payment-service
          - marketplace-service
          - web-app

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ====================
  # STAGING DEPLOYMENT
  # ====================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-images, security-scan]
    if: github.ref == 'refs/heads/staging' && needs.code-quality.outputs.should-deploy == 'true'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS Staging
        run: |
          # Update ECS task definitions with new image tags
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            aws ecs update-service \
              --cluster orpaynter-staging \
              --service $service \
              --force-new-deployment \
              --desired-count 1
          done

      - name: Wait for deployment
        run: |
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            aws ecs wait services-stable \
              --cluster orpaynter-staging \
              --services $service
          done

      - name: Run smoke tests
        run: |
          sleep 60  # Wait for services to be ready
          curl -f https://staging-api.orpaynter.com/health || exit 1
          curl -f https://staging.orpaynter.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Staging deployment successful",
              attachments: [{
                color: "good",
                fields: [{
                  title: "Branch",
                  value: "${{ github.ref_name }}",
                  short: true
                }, {
                  title: "Commit",
                  value: "${{ github.sha }}",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ====================
  # PRODUCTION DEPLOYMENT
  # ====================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-images, security-scan]
    if: github.ref == 'refs/heads/main' && needs.code-quality.outputs.should-deploy == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Create deployment backup
        run: |
          # Backup current production state
          aws ecs describe-services \
            --cluster orpaynter-production \
            --services api-gateway user-service project-service ai-service payment-service marketplace-service web-app \
            > deployment-backup-${{ github.sha }}.json

      - name: Blue/Green Deployment
        run: |
          # Deploy to green environment
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            # Update task definition with new image
            TASK_DEFINITION=$(aws ecs describe-task-definition \
              --task-definition $service-production \
              --query 'taskDefinition' \
              --output json)
            
            # Update image URL in task definition
            NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.REGISTRY }}/${{ github.repository }}/$service:${{ github.sha }}" \
              '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
            
            # Register new task definition
            aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEFINITION" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text
          done

      - name: Update production services
        run: |
          # Rolling deployment with health checks
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            echo "Deploying $service..."
            
            aws ecs update-service \
              --cluster orpaynter-production \
              --service $service \
              --task-definition $service-production \
              --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
            
            # Wait for service to stabilize
            aws ecs wait services-stable \
              --cluster orpaynter-production \
              --services $service \
              --cli-read-timeout 1200
            
            echo "$service deployed successfully"
          done

      - name: Health check validation
        run: |
          # Comprehensive health checks
          echo "Running production health checks..."
          
          # API health checks
          for i in {1..30}; do
            if curl -f https://api.orpaynter.com/health; then
              echo "API health check passed"
              break
            fi
            echo "Attempt $i: API not ready, waiting..."
            sleep 10
          done
          
          # Frontend health check
          curl -f https://orpaynter.com/health || exit 1
          
          # Database connectivity
          curl -f https://api.orpaynter.com/health/database || exit 1
          
          echo "All health checks passed"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          
          # Restore from backup
          aws ecs put-services \
            --cluster orpaynter-production \
            --services file://deployment-backup-${{ github.sha }}.json
          
          # Wait for rollback to complete
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            aws ecs wait services-stable \
              --cluster orpaynter-production \
              --services $service
          done
          
          echo "Rollback completed"

      - name: Update DNS and CDN
        run: |
          # Update CloudFront distributions
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚀 Production deployment successful!",
              attachments: [{
                color: "good",
                fields: [{
                  title: "Version",
                  value: "${{ github.sha }}",
                  short: true
                }, {
                  title: "Environment",
                  value: "Production",
                  short: true
                }, {
                  title: "URL",
                  value: "https://orpaynter.com",
                  short: false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "❌ Production deployment failed",
              attachments: [{
                color: "danger",
                fields: [{
                  title: "Branch",
                  value: "${{ github.ref_name }}",
                  short: true
                }, {
                  title: "Commit",
                  value: "${{ github.sha }}",
                  short: true
                }, {
                  title: "Action",
                  value: "Automatic rollback initiated",
                  short: false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ====================
  # POST-DEPLOYMENT
  # ====================

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new deployment version
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"deployment_version": "${{ github.sha }}", "timestamp": "${{ github.event.head_commit.timestamp }}"}' \
            https://monitoring.orpaynter.com/api/annotations

      - name: Run performance tests
        run: |
          # Run load tests against production
          docker run --rm \
            -v $PWD/performance-tests:/tests \
            loadimpact/k6:latest run /tests/production-load-test.js

      - name: Update documentation
        run: |
          # Auto-generate API documentation
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.DOCS_API_KEY }}" \
            https://docs.orpaynter.com/api/regenerate

      - name: Cleanup old images
        run: |
          # Remove old container images (keep last 10 versions)
          for service in api-gateway user-service project-service ai-service payment-service marketplace-service web-app; do
            aws ecr list-images \
              --repository-name orpaynter/$service \
              --filter tagStatus=TAGGED \
              --query 'imageIds[10:].[imageDigest]' \
              --output text | \
            while read digest; do
              aws ecr batch-delete-image \
                --repository-name orpaynter/$service \
                --image-ids imageDigest=$digest
            done
          done

  # ====================
  # RELEASE MANAGEMENT
  # ====================

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [post-deployment]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          git log --oneline --format="- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment Information
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **Deployed**: ${{ github.event.head_commit.timestamp }}
            - **URL**: https://orpaynter.com
          draft: false
          prerelease: false
