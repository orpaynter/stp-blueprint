{
  "sprint_day": 3,
  "title": "Full Dockerized Platform Deployment & CI/CD",
  "timestamp": "2025-06-27T03:46:54.829139",
  "status": "COMPLETED",
  "infrastructure": {
    "service_architecture": {
      "core_services": {
        "api_gateway": {
          "image": "orpaynter/api-gateway:latest",
          "ports": [
            "8080:8080"
          ],
          "environment": {
            "JWT_SECRET": "${JWT_SECRET}",
            "CORS_ORIGINS": "${CORS_ORIGINS}",
            "RATE_LIMIT": "1000"
          },
          "healthcheck": "/health",
          "replicas": 3
        },
        "ai_service": {
          "image": "orpaynter/ai-service:latest",
          "ports": [
            "8003:8003"
          ],
          "environment": {
            "MODEL_PATH": "/app/models",
            "CUDA_VISIBLE_DEVICES": "0,1",
            "BATCH_SIZE": "32"
          },
          "volumes": [
            "ai_models:/app/models",
            "ai_cache:/app/cache"
          ],
          "resources": {
            "memory": "8Gi",
            "cpu": "4000m",
            "gpu": "1"
          },
          "replicas": 2
        },
        "user_service": {
          "image": "orpaynter/user-service:latest",
          "ports": [
            "8001:8001"
          ],
          "environment": {
            "DATABASE_URL": "${POSTGRES_URL}",
            "REDIS_URL": "${REDIS_URL}",
            "EMAIL_SERVICE": "${SENDGRID_API_KEY}"
          },
          "depends_on": [
            "postgres",
            "redis"
          ],
          "replicas": 2
        },
        "project_service": {
          "image": "orpaynter/project-service:latest",
          "ports": [
            "8002:8002"
          ],
          "environment": {
            "DATABASE_URL": "${POSTGRES_URL}",
            "S3_BUCKET": "${S3_BUCKET}",
            "AWS_REGION": "${AWS_REGION}"
          },
          "volumes": [
            "project_uploads:/app/uploads"
          ],
          "replicas": 2
        },
        "notification_service": {
          "image": "orpaynter/notification-service:latest",
          "ports": [
            "8004:8004"
          ],
          "environment": {
            "EMAIL_PROVIDER": "sendgrid",
            "SMS_PROVIDER": "twilio",
            "PUSH_PROVIDER": "firebase"
          },
          "replicas": 1
        }
      },
      "frontend_services": {
        "web_app": {
          "image": "orpaynter/web-app:latest",
          "ports": [
            "3000:3000"
          ],
          "environment": {
            "REACT_APP_API_URL": "${API_GATEWAY_URL}",
            "REACT_APP_STRIPE_KEY": "${STRIPE_PUBLISHABLE_KEY}"
          },
          "replicas": 2
        },
        "mobile_api": {
          "image": "orpaynter/mobile-api:latest",
          "ports": [
            "8005:8005"
          ],
          "environment": {
            "CORS_MOBILE": "true",
            "PUSH_NOTIFICATIONS": "enabled"
          },
          "replicas": 1
        }
      },
      "data_services": {
        "postgres": {
          "image": "postgres:15-alpine",
          "environment": {
            "POSTGRES_DB": "orpaynter",
            "POSTGRES_USER": "${DB_USER}",
            "POSTGRES_PASSWORD": "${DB_PASSWORD}"
          },
          "volumes": [
            "postgres_data:/var/lib/postgresql/data"
          ],
          "ports": [
            "5432:5432"
          ],
          "backup": "daily"
        },
        "redis": {
          "image": "redis:7-alpine",
          "volumes": [
            "redis_data:/data"
          ],
          "ports": [
            "6379:6379"
          ],
          "command": "redis-server --appendonly yes"
        },
        "mongodb": {
          "image": "mongo:6",
          "environment": {
            "MONGO_INITDB_ROOT_USERNAME": "${MONGO_USER}",
            "MONGO_INITDB_ROOT_PASSWORD": "${MONGO_PASSWORD}"
          },
          "volumes": [
            "mongo_data:/data/db"
          ],
          "ports": [
            "27017:27017"
          ]
        },
        "qdrant": {
          "image": "qdrant/qdrant:latest",
          "volumes": [
            "qdrant_storage:/qdrant/storage"
          ],
          "ports": [
            "6333:6333"
          ],
          "environment": {
            "QDRANT__SERVICE__HTTP_PORT": "6333"
          }
        }
      }
    },
    "environments": {
      "staging": {
        "domain": "staging.orpaynter.com",
        "resources": {
          "cpu_limit": "2000m",
          "memory_limit": "4Gi",
          "storage": "100Gi"
        },
        "scaling": {
          "min_replicas": 1,
          "max_replicas": 3,
          "cpu_threshold": 70
        },
        "database": {
          "size": "small",
          "backup_retention": "7 days"
        }
      },
      "production": {
        "domain": "app.orpaynter.com",
        "resources": {
          "cpu_limit": "4000m",
          "memory_limit": "8Gi",
          "storage": "500Gi"
        },
        "scaling": {
          "min_replicas": 3,
          "max_replicas": 10,
          "cpu_threshold": 60
        },
        "database": {
          "size": "large",
          "backup_retention": "30 days"
        }
      }
    },
    "monitoring_stack": {
      "prometheus": {
        "image": "prom/prometheus:latest",
        "ports": [
          "9090:9090"
        ],
        "volumes": [
          "prometheus_data:/prometheus"
        ],
        "config": "prometheus.yml"
      },
      "grafana": {
        "image": "grafana/grafana:latest",
        "ports": [
          "3001:3000"
        ],
        "environment": {
          "GF_SECURITY_ADMIN_PASSWORD": "${GRAFANA_PASSWORD}"
        },
        "volumes": [
          "grafana_data:/var/lib/grafana"
        ]
      },
      "alertmanager": {
        "image": "prom/alertmanager:latest",
        "ports": [
          "9093:9093"
        ],
        "volumes": [
          "alertmanager_data:/alertmanager"
        ]
      },
      "elasticsearch": {
        "image": "elastic/elasticsearch:8.11.0",
        "environment": {
          "discovery.type": "single-node",
          "xpack.security.enabled": "false"
        },
        "volumes": [
          "elasticsearch_data:/usr/share/elasticsearch/data"
        ],
        "ports": [
          "9200:9200"
        ]
      },
      "kibana": {
        "image": "elastic/kibana:8.11.0",
        "ports": [
          "5601:5601"
        ],
        "environment": {
          "ELASTICSEARCH_HOSTS": "http://elasticsearch:9200"
        },
        "depends_on": [
          "elasticsearch"
        ]
      },
      "logstash": {
        "image": "elastic/logstash:8.11.0",
        "volumes": [
          "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf"
        ],
        "depends_on": [
          "elasticsearch"
        ]
      }
    },
    "resource_requirements": {
      "staging": {
        "total_cpu": "8 cores",
        "total_memory": "16GB",
        "storage": "100GB",
        "estimated_cost": "$250/month"
      },
      "production": {
        "total_cpu": "24 cores",
        "total_memory": "48GB",
        "storage": "500GB",
        "estimated_cost": "$800/month"
      }
    }
  },
  "deployment_configurations": {
    "docker_compose": {
      "staging": "version: '3.8'\nservices:\n  api_gateway:\n    image: orpaynter/api-gateway:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8080:8080\n    environment:\n      JWT_SECRET: ${JWT_SECRET}\n      CORS_ORIGINS: ${CORS_ORIGINS}\n      RATE_LIMIT: '1000'\n    healthcheck:\n      test:\n      - CMD\n      - curl\n      - -f\n      - http://localhost:8080/health\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n  ai_service:\n    image: orpaynter/ai-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8003:8003\n    environment:\n      MODEL_PATH: /app/models\n      CUDA_VISIBLE_DEVICES: 0,1\n      BATCH_SIZE: '32'\n    volumes:\n    - ai_models:/app/models\n    - ai_cache:/app/cache\n  user_service:\n    image: orpaynter/user-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8001:8001\n    environment:\n      DATABASE_URL: ${POSTGRES_URL}\n      REDIS_URL: ${REDIS_URL}\n      EMAIL_SERVICE: ${SENDGRID_API_KEY}\n    depends_on:\n    - postgres\n    - redis\n  project_service:\n    image: orpaynter/project-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8002:8002\n    environment:\n      DATABASE_URL: ${POSTGRES_URL}\n      S3_BUCKET: ${S3_BUCKET}\n      AWS_REGION: ${AWS_REGION}\n    volumes:\n    - project_uploads:/app/uploads\n  notification_service:\n    image: orpaynter/notification-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8004:8004\n    environment:\n      EMAIL_PROVIDER: sendgrid\n      SMS_PROVIDER: twilio\n      PUSH_PROVIDER: firebase\n  web_app:\n    image: orpaynter/web-app:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 3000:3000\n    environment:\n      REACT_APP_API_URL: ${API_GATEWAY_URL}\n      REACT_APP_STRIPE_KEY: ${STRIPE_PUBLISHABLE_KEY}\n  mobile_api:\n    image: orpaynter/mobile-api:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8005:8005\n    environment:\n      CORS_MOBILE: 'true'\n      PUSH_NOTIFICATIONS: enabled\n  postgres:\n    image: postgres:15-alpine\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 5432:5432\n    environment:\n      POSTGRES_DB: orpaynter\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n    - postgres_data:/var/lib/postgresql/data\n  redis:\n    image: redis:7-alpine\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 6379:6379\n    volumes:\n    - redis_data:/data\n  mongodb:\n    image: mongo:6\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}\n    volumes:\n    - mongo_data:/data/db\n  qdrant:\n    image: qdrant/qdrant:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 6333:6333\n    environment:\n      QDRANT__SERVICE__HTTP_PORT: '6333'\n    volumes:\n    - qdrant_storage:/qdrant/storage\n  prometheus:\n    image: prom/prometheus:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9090:9090\n    volumes:\n    - prometheus_data:/prometheus\n  grafana:\n    image: grafana/grafana:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 3001:3000\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}\n    volumes:\n    - grafana_data:/var/lib/grafana\n  alertmanager:\n    image: prom/alertmanager:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9093:9093\n    volumes:\n    - alertmanager_data:/alertmanager\n  elasticsearch:\n    image: elastic/elasticsearch:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9200:9200\n    environment:\n      discovery.type: single-node\n      xpack.security.enabled: 'false'\n    volumes:\n    - elasticsearch_data:/usr/share/elasticsearch/data\n  kibana:\n    image: elastic/kibana:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 5601:5601\n    environment:\n      ELASTICSEARCH_HOSTS: http://elasticsearch:9200\n    depends_on:\n    - elasticsearch\n  logstash:\n    image: elastic/logstash:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    volumes:\n    - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n    depends_on:\n    - elasticsearch\nvolumes:\n  postgres_data: null\n  redis_data: null\n  mongo_data: null\n  qdrant_storage: null\n  ai_models: null\n  ai_cache: null\n  project_uploads: null\n  prometheus_data: null\n  grafana_data: null\n  alertmanager_data: null\n  elasticsearch_data: null\nnetworks:\n  orpaynter_network:\n    driver: bridge\n",
      "production": "version: '3.8'\nservices:\n  api_gateway:\n    image: orpaynter/api-gateway:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8080:8080\n    environment:\n      JWT_SECRET: ${JWT_SECRET}\n      CORS_ORIGINS: ${CORS_ORIGINS}\n      RATE_LIMIT: '1000'\n    deploy:\n      replicas: 3\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n    healthcheck:\n      test:\n      - CMD\n      - curl\n      - -f\n      - http://localhost:8080/health\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n  ai_service:\n    image: orpaynter/ai-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8003:8003\n    environment:\n      MODEL_PATH: /app/models\n      CUDA_VISIBLE_DEVICES: 0,1\n      BATCH_SIZE: '32'\n    volumes:\n    - ai_models:/app/models\n    - ai_cache:/app/cache\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  user_service:\n    image: orpaynter/user-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8001:8001\n    environment:\n      DATABASE_URL: ${POSTGRES_URL}\n      REDIS_URL: ${REDIS_URL}\n      EMAIL_SERVICE: ${SENDGRID_API_KEY}\n    depends_on:\n    - postgres\n    - redis\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  project_service:\n    image: orpaynter/project-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8002:8002\n    environment:\n      DATABASE_URL: ${POSTGRES_URL}\n      S3_BUCKET: ${S3_BUCKET}\n      AWS_REGION: ${AWS_REGION}\n    volumes:\n    - project_uploads:/app/uploads\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  notification_service:\n    image: orpaynter/notification-service:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8004:8004\n    environment:\n      EMAIL_PROVIDER: sendgrid\n      SMS_PROVIDER: twilio\n      PUSH_PROVIDER: firebase\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  web_app:\n    image: orpaynter/web-app:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 3000:3000\n    environment:\n      REACT_APP_API_URL: ${API_GATEWAY_URL}\n      REACT_APP_STRIPE_KEY: ${STRIPE_PUBLISHABLE_KEY}\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  mobile_api:\n    image: orpaynter/mobile-api:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 8005:8005\n    environment:\n      CORS_MOBILE: 'true'\n      PUSH_NOTIFICATIONS: enabled\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  postgres:\n    image: postgres:15-alpine\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 5432:5432\n    environment:\n      POSTGRES_DB: orpaynter\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n    - postgres_data:/var/lib/postgresql/data\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  redis:\n    image: redis:7-alpine\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 6379:6379\n    volumes:\n    - redis_data:/data\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  mongodb:\n    image: mongo:6\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 27017:27017\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}\n    volumes:\n    - mongo_data:/data/db\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  qdrant:\n    image: qdrant/qdrant:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 6333:6333\n    environment:\n      QDRANT__SERVICE__HTTP_PORT: '6333'\n    volumes:\n    - qdrant_storage:/qdrant/storage\n    deploy:\n      replicas: 1\n      resources:\n        limits:\n          cpus: 4000m\n          memory: 8Gi\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n  prometheus:\n    image: prom/prometheus:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9090:9090\n    volumes:\n    - prometheus_data:/prometheus\n  grafana:\n    image: grafana/grafana:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 3001:3000\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}\n    volumes:\n    - grafana_data:/var/lib/grafana\n  alertmanager:\n    image: prom/alertmanager:latest\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9093:9093\n    volumes:\n    - alertmanager_data:/alertmanager\n  elasticsearch:\n    image: elastic/elasticsearch:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 9200:9200\n    environment:\n      discovery.type: single-node\n      xpack.security.enabled: 'false'\n    volumes:\n    - elasticsearch_data:/usr/share/elasticsearch/data\n  kibana:\n    image: elastic/kibana:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    ports:\n    - 5601:5601\n    environment:\n      ELASTICSEARCH_HOSTS: http://elasticsearch:9200\n    depends_on:\n    - elasticsearch\n  logstash:\n    image: elastic/logstash:8.11.0\n    networks:\n    - orpaynter_network\n    restart: unless-stopped\n    volumes:\n    - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n    depends_on:\n    - elasticsearch\nvolumes:\n  postgres_data: null\n  redis_data: null\n  mongo_data: null\n  qdrant_storage: null\n  ai_models: null\n  ai_cache: null\n  project_uploads: null\n  prometheus_data: null\n  grafana_data: null\n  alertmanager_data: null\n  elasticsearch_data: null\nnetworks:\n  orpaynter_network:\n    driver: bridge\n"
    },
    "kubernetes_manifests": {
      "namespace.yaml": "\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: orpaynter\n  labels:\n    name: orpaynter\n---\n",
      "configmap.yaml": "\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: orpaynter-config\n  namespace: orpaynter\ndata:\n  JWT_SECRET: \"your-jwt-secret-here\"\n  CORS_ORIGINS: \"https://orpaynter.com,https://app.orpaynter.com\"\n  RATE_LIMIT: \"1000\"\n  BATCH_SIZE: \"32\"\n---\n",
      "secrets.yaml": "\napiVersion: v1\nkind: Secret\nmetadata:\n  name: orpaynter-secrets\n  namespace: orpaynter\ntype: Opaque\nstringData:\n  DB_PASSWORD: \"your-db-password\"\n  REDIS_PASSWORD: \"your-redis-password\"\n  STRIPE_SECRET_KEY: \"your-stripe-secret\"\n  SENDGRID_API_KEY: \"your-sendgrid-key\"\n---\n",
      "api_gateway-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api_gateway\n  namespace: orpaynter\n  labels:\n    app: api_gateway\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: api_gateway\n  template:\n    metadata:\n      labels:\n        app: api_gateway\n    spec:\n      containers:\n      - name: api_gateway\n        image: orpaynter/api-gateway:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api_gateway-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: api_gateway\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8080\n  type: ClusterIP\n---\n",
      "ai_service-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ai_service\n  namespace: orpaynter\n  labels:\n    app: ai_service\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ai_service\n  template:\n    metadata:\n      labels:\n        app: ai_service\n    spec:\n      containers:\n      - name: ai_service\n        image: orpaynter/ai-service:latest\n        ports:\n        - containerPort: 8003\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8003\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8003\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ai_service-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: ai_service\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8003\n  type: ClusterIP\n---\n",
      "user_service-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user_service\n  namespace: orpaynter\n  labels:\n    app: user_service\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: user_service\n  template:\n    metadata:\n      labels:\n        app: user_service\n    spec:\n      containers:\n      - name: user_service\n        image: orpaynter/user-service:latest\n        ports:\n        - containerPort: 8001\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8001\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8001\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user_service-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: user_service\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8001\n  type: ClusterIP\n---\n",
      "project_service-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: project_service\n  namespace: orpaynter\n  labels:\n    app: project_service\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: project_service\n  template:\n    metadata:\n      labels:\n        app: project_service\n    spec:\n      containers:\n      - name: project_service\n        image: orpaynter/project-service:latest\n        ports:\n        - containerPort: 8002\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8002\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8002\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: project_service-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: project_service\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8002\n  type: ClusterIP\n---\n",
      "notification_service-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: notification_service\n  namespace: orpaynter\n  labels:\n    app: notification_service\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: notification_service\n  template:\n    metadata:\n      labels:\n        app: notification_service\n    spec:\n      containers:\n      - name: notification_service\n        image: orpaynter/notification-service:latest\n        ports:\n        - containerPort: 8004\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8004\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8004\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: notification_service-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: notification_service\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8004\n  type: ClusterIP\n---\n",
      "web_app-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web_app\n  namespace: orpaynter\n  labels:\n    app: web_app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: web_app\n  template:\n    metadata:\n      labels:\n        app: web_app\n    spec:\n      containers:\n      - name: web_app\n        image: orpaynter/web-app:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: web_app-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: web_app\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 3000\n  type: ClusterIP\n---\n",
      "mobile_api-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mobile_api\n  namespace: orpaynter\n  labels:\n    app: mobile_api\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mobile_api\n  template:\n    metadata:\n      labels:\n        app: mobile_api\n    spec:\n      containers:\n      - name: mobile_api\n        image: orpaynter/mobile-api:latest\n        ports:\n        - containerPort: 8005\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8005\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8005\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mobile_api-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: mobile_api\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8005\n  type: ClusterIP\n---\n",
      "postgres-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: orpaynter\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 5432\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 5432\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: postgres\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 5432\n  type: ClusterIP\n---\n",
      "redis-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: orpaynter\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 6379\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 6379\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: redis\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 6379\n  type: ClusterIP\n---\n",
      "mongodb-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongodb\n  namespace: orpaynter\n  labels:\n    app: mongodb\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:6\n        ports:\n        - containerPort: 27017\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 27017\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 27017\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongodb-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: mongodb\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 27017\n  type: ClusterIP\n---\n",
      "qdrant-deployment.yaml": "\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: qdrant\n  namespace: orpaynter\n  labels:\n    app: qdrant\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: qdrant\n  template:\n    metadata:\n      labels:\n        app: qdrant\n    spec:\n      containers:\n      - name: qdrant\n        image: qdrant/qdrant:latest\n        ports:\n        - containerPort: 6333\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 6333\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 6333\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: qdrant-service\n  namespace: orpaynter\nspec:\n  selector:\n    app: qdrant\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 6333\n  type: ClusterIP\n---\n"
    },
    "ci_cd_pipeline": "\nname: OrPaynter CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: orpaynter\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: orpaynter_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    strategy:\n      matrix:\n        service: [api-gateway, ai-service, user-service, project-service, web-app]\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n    \n    - name: Set up Python 3.11\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n        cache: 'pip'\n    \n    - name: Set up Node.js 18\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n        cache-dependency-path: 'frontend/package-lock.json'\n    \n    - name: Install dependencies\n      run: |\n        if [ -f \"services/${{ matrix.service }}/requirements.txt\" ]; then\n          pip install -r services/${{ matrix.service }}/requirements.txt\n        fi\n        if [ -f \"services/${{ matrix.service }}/package.json\" ]; then\n          cd services/${{ matrix.service }}\n          npm ci\n        fi\n    \n    - name: Run linting\n      run: |\n        if [ -f \"services/${{ matrix.service }}/requirements.txt\" ]; then\n          flake8 services/${{ matrix.service }}/src --count --select=E9,F63,F7,F82 --show-source --statistics\n          black --check services/${{ matrix.service }}/src\n        fi\n        if [ -f \"services/${{ matrix.service }}/package.json\" ]; then\n          cd services/${{ matrix.service }}\n          npm run lint\n        fi\n    \n    - name: Run unit tests\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orpaynter_test\n        REDIS_URL: redis://localhost:6379\n        JWT_SECRET: test-secret\n      run: |\n        if [ -f \"services/${{ matrix.service }}/requirements.txt\" ]; then\n          cd services/${{ matrix.service }}\n          python -m pytest tests/ -v --cov=src --cov-report=xml\n        fi\n        if [ -f \"services/${{ matrix.service }}/package.json\" ]; then\n          cd services/${{ matrix.service }}\n          npm test -- --coverage --watchAll=false\n        fi\n    \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: ${{ matrix.service }}\n        name: ${{ matrix.service }}-coverage\n\n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n    \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n    \n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n\n  build:\n    needs: [test, security]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\n    \n    strategy:\n      matrix:\n        service: [api-gateway, ai-service, user-service, project-service, web-app]\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha\n          type=raw,value=latest,enable={{is_default_branch}}\n    \n    - name: Build and push Docker image\n      uses: docker/build-push-action@v5\n      with:\n        context: services/${{ matrix.service }}\n        platforms: linux/amd64,linux/arm64\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  deploy-staging:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n    \n    - name: Set up kubectl\n      uses: azure/setup-kubectl@v3\n      with:\n        version: 'v1.28.0'\n    \n    - name: Configure kubectl\n      run: |\n        echo \"${{ secrets.KUBE_CONFIG_STAGING }}\" | base64 -d > kubeconfig\n        export KUBECONFIG=kubeconfig\n    \n    - name: Deploy to staging\n      run: |\n        export KUBECONFIG=kubeconfig\n        kubectl apply -f k8s/staging/\n        kubectl rollout restart deployment -n orpaynter-staging\n        kubectl rollout status deployment -n orpaynter-staging --timeout=600s\n    \n    - name: Run integration tests\n      run: |\n        python scripts/integration_tests.py --environment staging\n    \n    - name: Notify Slack\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n\n  deploy-production:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: production\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n    \n    - name: Set up kubectl\n      uses: azure/setup-kubectl@v3\n      with:\n        version: 'v1.28.0'\n    \n    - name: Configure kubectl\n      run: |\n        echo \"${{ secrets.KUBE_CONFIG_PRODUCTION }}\" | base64 -d > kubeconfig\n        export KUBECONFIG=kubeconfig\n    \n    - name: Blue-Green Deployment\n      run: |\n        export KUBECONFIG=kubeconfig\n        # Deploy to green environment\n        kubectl apply -f k8s/production/ --namespace=orpaynter-green\n        kubectl rollout status deployment -n orpaynter-green --timeout=600s\n        \n        # Run smoke tests\n        python scripts/smoke_tests.py --environment production-green\n        \n        # Switch traffic to green\n        kubectl patch service orpaynter-service -n orpaynter --patch '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n        \n        # Wait and verify\n        sleep 60\n        python scripts/health_check.py --environment production\n        \n        # Clean up blue environment\n        kubectl delete namespace orpaynter-blue || true\n        kubectl create namespace orpaynter-blue\n    \n    - name: Database migration\n      run: |\n        kubectl exec -n orpaynter deployment/user-service -- python manage.py migrate\n    \n    - name: Notify stakeholders\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#production-alerts'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}\n\n  monitoring:\n    needs: [deploy-staging, deploy-production]\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n    - name: Update monitoring dashboards\n      run: |\n        curl -X POST \"https://api.grafana.com/api/annotations\"           -H \"Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}\"           -H \"Content-Type: application/json\"           -d '{\n            \"text\": \"OrPaynter deployment completed\",\n            \"tags\": [\"deployment\", \"orpaynter\"],\n            \"time\": '${{ github.event.head_commit.timestamp }}'\n          }'\n    \n    - name: Trigger performance tests\n      run: |\n        curl -X POST \"https://api.loadimpact.com/v5/tests\"           -H \"Authorization: Token ${{ secrets.K6_API_TOKEN }}\"           -H \"Content-Type: application/json\"           -d '{\"name\": \"OrPaynter Post-Deployment Performance Test\"}'\n"
  },
  "deployment_checklist": {
    "infrastructure_setup": [
      "\u2705 Complete service architecture defined",
      "\u2705 Docker Compose configurations generated",
      "\u2705 Kubernetes manifests created",
      "\u2705 Environment-specific configurations ready",
      "\u25cb Cloud provider infrastructure provisioning",
      "\u25cb SSL certificates and domain configuration",
      "\u25cb Database initialization and migration scripts"
    ],
    "ci_cd_pipeline": [
      "\u2705 GitHub Actions workflow configured",
      "\u2705 Multi-service build and test automation",
      "\u2705 Security scanning integration",
      "\u2705 Blue-green deployment strategy",
      "\u25cb Production deployment secrets configuration",
      "\u25cb Monitoring and alerting integration",
      "\u25cb Rollback procedures tested"
    ],
    "monitoring_observability": [
      "\u2705 Prometheus metrics collection setup",
      "\u2705 Grafana dashboards configured",
      "\u2705 ELK stack for log aggregation",
      "\u2705 Health check endpoints implemented",
      "\u25cb Alert rules and notification channels",
      "\u25cb Performance monitoring baselines",
      "\u25cb Capacity planning and auto-scaling"
    ]
  },
  "operational_procedures": {
    "deployment_commands": [
      "# Staging deployment",
      "docker-compose -f docker-compose.staging.yml up -d",
      "",
      "# Production deployment",
      "kubectl apply -f k8s/production/",
      "",
      "# Health check",
      "curl https://api.orpaynter.com/health",
      "",
      "# View logs",
      "kubectl logs -f deployment/api-gateway -n orpaynter"
    ],
    "backup_procedures": [
      "# Database backup",
      "kubectl exec postgres-0 -- pg_dump orpaynter > backup.sql",
      "",
      "# Volume backup",
      "kubectl cp postgres-0:/var/lib/postgresql/data ./postgres-backup/",
      "",
      "# S3 sync for uploads",
      "aws s3 sync s3://orpaynter-uploads ./uploads-backup/"
    ],
    "rollback_procedures": [
      "# Quick rollback",
      "kubectl rollout undo deployment/api-gateway -n orpaynter",
      "",
      "# Full environment rollback",
      "kubectl apply -f k8s/production/previous-version/",
      "",
      "# Database rollback (if needed)",
      "kubectl exec postgres-0 -- psql orpaynter < backup-previous.sql"
    ]
  },
  "security_measures": {
    "network_security": [
      "Private VPC with isolated subnets",
      "Network policies for pod-to-pod communication",
      "Load balancer with SSL termination",
      "DDoS protection and rate limiting"
    ],
    "container_security": [
      "Non-root container execution",
      "Resource limits and quotas",
      "Security context constraints",
      "Vulnerability scanning in CI/CD"
    ],
    "data_security": [
      "Encrypted storage volumes",
      "TLS 1.3 for all communications",
      "Secrets management with rotation",
      "Database encryption at rest"
    ]
  },
  "next_steps": [
    "\u2705 Complete infrastructure architecture defined",
    "\ud83d\ude80 CI/CD pipeline ready for automated deployments",
    "\ud83d\udcca Comprehensive monitoring and alerting configured",
    "\ud83c\udfaf Ready for Day 4: Beta Onboarding & Communication Templates"
  ]
}