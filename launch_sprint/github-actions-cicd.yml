
name: OrPaynter CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: orpaynter

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orpaynter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        service: [api-gateway, ai-service, user-service, project-service, web-app]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        if [ -f "services/${{ matrix.service }}/requirements.txt" ]; then
          pip install -r services/${{ matrix.service }}/requirements.txt
        fi
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
          npm ci
        fi
    
    - name: Run linting
      run: |
        if [ -f "services/${{ matrix.service }}/requirements.txt" ]; then
          flake8 services/${{ matrix.service }}/src --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check services/${{ matrix.service }}/src
        fi
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
          npm run lint
        fi
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orpaynter_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        if [ -f "services/${{ matrix.service }}/requirements.txt" ]; then
          cd services/${{ matrix.service }}
          python -m pytest tests/ -v --cov=src --cov-report=xml
        fi
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
          npm test -- --coverage --watchAll=false
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [api-gateway, ai-service, user-service, project-service, web-app]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/staging/
        kubectl rollout restart deployment -n orpaynter-staging
        kubectl rollout status deployment -n orpaynter-staging --timeout=600s
    
    - name: Run integration tests
      run: |
        python scripts/integration_tests.py --environment staging
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Blue-Green Deployment
      run: |
        export KUBECONFIG=kubeconfig
        # Deploy to green environment
        kubectl apply -f k8s/production/ --namespace=orpaynter-green
        kubectl rollout status deployment -n orpaynter-green --timeout=600s
        
        # Run smoke tests
        python scripts/smoke_tests.py --environment production-green
        
        # Switch traffic to green
        kubectl patch service orpaynter-service -n orpaynter --patch '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and verify
        sleep 60
        python scripts/health_check.py --environment production
        
        # Clean up blue environment
        kubectl delete namespace orpaynter-blue || true
        kubectl create namespace orpaynter-blue
    
    - name: Database migration
      run: |
        kubectl exec -n orpaynter deployment/user-service -- python manage.py migrate
    
    - name: Notify stakeholders
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}

  monitoring:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Update monitoring dashboards
      run: |
        curl -X POST "https://api.grafana.com/api/annotations"           -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}"           -H "Content-Type: application/json"           -d '{
            "text": "OrPaynter deployment completed",
            "tags": ["deployment", "orpaynter"],
            "time": '${{ github.event.head_commit.timestamp }}'
          }'
    
    - name: Trigger performance tests
      run: |
        curl -X POST "https://api.loadimpact.com/v5/tests"           -H "Authorization: Token ${{ secrets.K6_API_TOKEN }}"           -H "Content-Type: application/json"           -d '{"name": "OrPaynter Post-Deployment Performance Test"}'
