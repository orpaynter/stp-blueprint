name: API Gateway CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'api_gateway/**'
      - '.github/workflows/api_gateway.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api_gateway/**'
      - '.github/workflows/api_gateway.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api_gateway/package-lock.json
      
      - name: Install dependencies
        run: cd api_gateway && npm ci
      
      - name: Run ESLint
        run: cd api_gateway && npm run lint
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api_gateway/package-lock.json
      
      - name: Install dependencies
        run: cd api_gateway && npm ci
      
      - name: Run tests
        run: cd api_gateway && npm test
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api_gateway/package-lock.json
      
      - name: Install dependencies
        run: cd api_gateway && npm ci
      
      - name: Build
        run: cd api_gateway && npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api-gateway-build
          path: api_gateway/dist
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: api-gateway-build
          path: api_gateway/dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: orpaynter-api-gateway
        run: |
          cd api_gateway
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster orpaynter-cluster --service orpaynter-api-gateway --force-new-deployment
      
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable --cluster orpaynter-cluster --services orpaynter-api-gateway
      
      - name: Generate OpenAPI documentation
        run: |
          cd api_gateway
          npm run generate-docs
      
      - name: Deploy API documentation to S3
        run: |
          aws s3 sync api_gateway/docs/api s3://orpaynter-frontend-prod/api-docs/ --delete
