apiVersion: v1
kind: Namespace
metadata:
  name: orpaynter
  labels:
    name: orpaynter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orpaynter-config
  namespace: orpaynter
data:
  NODE_ENV: "production"
  API_URL: "https://api.oliversroofingandcontracting.com"
  FRONTEND_URL: "https://www.oliversroofingandcontracting.com"
---
apiVersion: v1
kind: Secret
metadata:
  name: orpaynter-secrets
  namespace: orpaynter
type: Opaque
data:
  # These are placeholders - actual values should be set during deployment
  JWT_SECRET: "UExBQ0VIT0xERVJfSldUX1NFQ1JFVA=="
  DATABASE_URL: "UExBQ0VIT0xERVJfREFUQUJBU0VfVVJM"
  REDIS_URL: "UExBQ0VIT0xERVJfUkVESVNfVVJM"
  QDRANT_URL: "UExBQ0VIT0xERVJfUURSQU5UX1VSTA=="
  OPENAI_API_KEY: "UExBQ0VIT0xERVJfT1BFTkFJX0FQSV9LRVk="
  STRIPE_SECRET_KEY: "UExBQ0VIT0xERVJfU1RSSVBFX1NFQ1JFVF9LRVk="
  OPENWEATHERMAP_API_KEY: "UExBQ0VIT0xERVJfT1BFTldFQVRIRVJNQVBfQVBJX0tFWQ=="
  AWS_ACCESS_KEY_ID: "UExBQ0VIT0xERVJfQVdTX0FDQ0VTU19LRVlfSUQ="
  AWS_SECRET_ACCESS_KEY: "UExBQ0VIT0xERVJfQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZ"
  GOOGLE_CALENDAR_API_KEY: "UExBQ0VIT0xERVJfR09PR0xFX0NBTEVOREFSX0FQSV9LRVk="
  TWILIO_ACCOUNT_SID: "UExBQ0VIT0xERVJfVFdJTElPX0FDQ09VTlRfU0lE"
  TWILIO_AUTH_TOKEN: "UExBQ0VIT0xERVJfVFdJTElPX0FVVEhfVE9LRU4="
  SENDGRID_API_KEY: "UExBQ0VIT0xERVJfU0VOREdSSURfQVBJX0tFWQ=="
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ${ECR_REPOSITORY}/orpaynter-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: orpaynter
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: ${ECR_REPOSITORY}/orpaynter-api-gateway:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: orpaynter
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
---
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: ${ECR_REPOSITORY}/orpaynter-user-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: orpaynter
spec:
  selector:
    app: user-service
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP
---
# Project Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: project-service
  template:
    metadata:
      labels:
        app: project-service
    spec:
      containers:
      - name: project-service
        image: ${ECR_REPOSITORY}/orpaynter-project-service:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Project Service Service
apiVersion: v1
kind: Service
metadata:
  name: project-service
  namespace: orpaynter
spec:
  selector:
    app: project-service
  ports:
  - port: 3002
    targetPort: 3002
  type: ClusterIP
---
# Assessment Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assessment-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: assessment-service
  template:
    metadata:
      labels:
        app: assessment-service
    spec:
      containers:
      - name: assessment-service
        image: ${ECR_REPOSITORY}/orpaynter-assessment-service:latest
        ports:
        - containerPort: 3003
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: OPENAI_API_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Assessment Service Service
apiVersion: v1
kind: Service
metadata:
  name: assessment-service
  namespace: orpaynter
spec:
  selector:
    app: assessment-service
  ports:
  - port: 3003
    targetPort: 3003
  type: ClusterIP
---
# Claim Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claim-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: claim-service
  template:
    metadata:
      labels:
        app: claim-service
    spec:
      containers:
      - name: claim-service
        image: ${ECR_REPOSITORY}/orpaynter-claim-service:latest
        ports:
        - containerPort: 3004
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Claim Service Service
apiVersion: v1
kind: Service
metadata:
  name: claim-service
  namespace: orpaynter
spec:
  selector:
    app: claim-service
  ports:
  - port: 3004
    targetPort: 3004
  type: ClusterIP
---
# Payment Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
    spec:
      containers:
      - name: payment-service
        image: ${ECR_REPOSITORY}/orpaynter-payment-service:latest
        ports:
        - containerPort: 3005
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: STRIPE_SECRET_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Payment Service Service
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: orpaynter
spec:
  selector:
    app: payment-service
  ports:
  - port: 3005
    targetPort: 3005
  type: ClusterIP
---
# Marketplace Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marketplace-service
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: marketplace-service
  template:
    metadata:
      labels:
        app: marketplace-service
    spec:
      containers:
      - name: marketplace-service
        image: ${ECR_REPOSITORY}/orpaynter-marketplace-service:latest
        ports:
        - containerPort: 3006
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orpaynter-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: DATABASE_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Marketplace Service Service
apiVersion: v1
kind: Service
metadata:
  name: marketplace-service
  namespace: orpaynter
spec:
  selector:
    app: marketplace-service
  ports:
  - port: 3006
    targetPort: 3006
  type: ClusterIP
---
# Damage Assessor Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: damage-assessor
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: damage-assessor
  template:
    metadata:
      labels:
        app: damage-assessor
    spec:
      containers:
      - name: damage-assessor
        image: ${ECR_REPOSITORY}/orpaynter-damage-assessor:latest
        ports:
        - containerPort: 5000
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: OPENAI_API_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: AWS_SECRET_ACCESS_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Damage Assessor Service
apiVersion: v1
kind: Service
metadata:
  name: damage-assessor
  namespace: orpaynter
spec:
  selector:
    app: damage-assessor
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP
---
# Cost Estimator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cost-estimator
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cost-estimator
  template:
    metadata:
      labels:
        app: cost-estimator
    spec:
      containers:
      - name: cost-estimator
        image: ${ECR_REPOSITORY}/orpaynter-cost-estimator:latest
        ports:
        - containerPort: 5001
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: orpaynter-secrets
              key: OPENAI_API_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Cost Estimator Service
apiVersion: v1
kind: Service
metadata:
  name: cost-estimator
  namespace: orpaynter
spec:
  selector:
    app: cost-estimator
  ports:
  - port: 5001
    targetPort: 5001
  type: ClusterIP
---
# Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: orpaynter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
    spec:
      containers:
      - name: scheduler
        image: ${ECR_REPOSITORY
(Content truncated due to size limit. Use line ranges to read in chunks)